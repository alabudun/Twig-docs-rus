``for``
=======

Цикл перебирает элементы списка. Для примера вывод списка пользователей, записанного в переменной ``users``:

.. code-block:: jinja

    <h1>Пользователи</h1>
    <ul>
        {% for user in users %}
            <li>{{ user.username|e }}</li>
        {% endfor %}
    </ul>

.. Примечание::

    Списком может быть либо массив, либо объект с интерфейсом ``Traversable``.

Если вам нужно перебрать последовательность чисел - используйте оператор ``..``:

.. code-block:: jinja

    {% for i in 0..10 %}
        * {{ i }}
    {% endfor %}

Этот код выведет числа от 0 до 10

Это может быть полезно с буквами:

.. code-block:: jinja

    {% for letter in 'a'..'z' %}
        * {{ letter }}
    {% endfor %}

Оператор ``..`` принимает любые фильтры слева и справа:

.. code-block:: jinja

    {% for letter in 'a'|upper..'z'|upper %}
        * {{ letter }}
    {% endfor %}

.. На заметку:

    Если вам нужен больший шаг итерации - используйте функцию ``range``.

Переменная `loop`
-------------------

Внутри цикла ``for`` вы можете получить значения специальных переменных:

===================== =============================================================
Переменная             Описание
===================== =============================================================
``loop.index``        Номер текущей итерации, начиная с 1
``loop.index0``       Номер текущей итерации, начиная с 0
``loop.revindex``     Номер текущей итерации с конца, заканчивается 1
``loop.revindex0``    Номер текущей итерации с конца, заканчивается 0
``loop.first``        В переменной ``true``, если цикл на первом элементе
``loop.last``         В переменной ``true``, если цикл на последнем элементе
``loop.length``       Количество переменных в списке
``loop.parent``       Родительский контекст
===================== =============================================================

.. code-block:: jinja

    {% for user in users %}
        {{ loop.index }} - {{ user.username }}
    {% endfor %}

.. Примечание::

    Переменные ``loop.length``, ``loop.revindex``, ``loop.revindex0``, и ``loop.last`` доступны только для массивов. Также они доступны в цикле с условием.

Версия:: 1.2
    Модификатор ``if`` поддерживается с Twig 1.2.

Добавление условий
------------------

В отличии от PHP в Twig нет возможности прервать, или продолжить (``break``/``continue``) цикл. Однако вы можете фильтровать вывод c помощью модификатора ``if``, пропуская элементы. В следующем примере пропускаются все не активные пользователи.

.. code-block:: jinja

    <ul>
        {% for user in users if user.active %}
            <li>{{ user.username|e }}</li>
        {% endfor %}
    </ul>

Приемущество заключается в том, что такой цикл будет считать только подходящие под условия значения списка.

.. Примечание::

    Использование ``loop``-переменных вместе с условиями не рекомендуется, тк может вызвать неожиданные проблемы. На пример добавив условие ``loop.index > 4`` цикл никогда не будет пройден, тк каждая итерация выполняется только после выполнения условия.

Отметка `else`
-----------------

Если ни одной итерации не произошло, тк цикл пуст, или условия вывода не выполнились - можно вывести замену, используя ``else``:

.. code-block:: jinja

    <ul>
        {% for user in users %}
            <li>{{ user.username|e }}</li>
        {% else %}
            <li><em>Не найдено ни одного пользователя</em></li>
        {% endfor %}
    </ul>

Перебор по ключам
-------------------

По умолчанию цикл перебирает значения последовательности. Вместо этого можно перебрать ключи, используя фильтр ``keys``:

.. code-block:: jinja

    <h1>ID пользователей</h1>
    <ul>
        {% for key in users|keys %}
            <li>{{ key }}</li>
        {% endfor %}
    </ul>

Перебор по ключам и значениям
------------------------------

Также можно перебрать ключи и значения вместе:

.. code-block:: jinja

    <h1>Пользователи</h1>
    <ul>
        {% for key, user in users %}
            <li>{{ key }}: {{ user.username|e }}</li>
        {% endfor %}
    </ul>
