Twig для дизайнеров
===========================
Этот документ описывает синтаксис и семантику шаблонов. Будет наиболее полезен тем, кто создает Twig шаблоны

Начало
--------
Шаблон - это просто текстовой файл. Из шаблона можно сгенерировать любой текстовой документ(HTML, XML, CSV, LaTeX, и тд.). Twig шаблоны может не прикреплены за каким-либо расширением, хотя обычно это ``.html`` или ``.xml``.

Шаблон может содержать **переменные** или **выражения**, которые заменяются значениями, во время генерации шаблона.
Также в шаблонах существуют **теги**, котролирующие логику сборки шаблона.

Рассмотрим небольшой пример шаблона, В котором показаны некоторые основы создания шаблонов:

.. code-block:: html+jinja

    <!DOCTYPE html>
    <html>
        <head>
            <title>Мой сайт</title>
        </head>
        <body>
            <ul id="navigation">
            {% for item in navigation %}
                <li><a href="{{ item.href }}">{{ item.caption }}</a></li>
            {% endfor %}
            </ul>

            <h1>Моя статья</h1>
            {{ text }}
        </body>
    </html>

Здесь присутвует два вида разделителей:
 - ``{% ... %}`` используется для выполнения выражений: циклов, условий, тегов
 - ``{{ ... }}`` используется для вывода значений выражения в шаблон

Интеграция с IDE
----------------

Множество IDE поддерживают подсветку синтаксиса и автодополнение:

* *Textmate* : `Twig bundle`_
* *Vim* : `Jinja syntax plugin`_
* *Netbeans* : `Twig syntax plugin`_ (до 7.1, встроен с 7.2)
* *PhpStorm* (native as of 2.1)
* *Eclipse* : `Twig plugin`_
* *Sublime Text* : `Twig bundle`_
* *GtkSourceView* : `Twig language definition`_ (используется gedit и другие проекты)
* *Coda* и *SubEthaEdit* : `Twig syntax mode`_
* *Coda 2* : `other Twig syntax mode`_
* *Komodo* и *Komodo Edit* : Twig highlight/syntax check mode
* *Notepad++* : `Notepad++ Twig Highlighter`_
* *Emacs* :  `web-mode.el`_

Переменные
----------

Все переменные, переданные в шаблон можно использовать повторно. Переменные могут включать в себя аттрибуты. Вид переменных зависит от приложения.

Атрибутами переменных являются методы и свойства PHP-объектов, или переменные массивов.
Для доступа к атрибутам можно использовать (``.``), или (``[]``):

.. code-block:: jinja

    {{ foo.bar }}
    {{ foo['bar'] }}

Когда атрибуты содержат спец.символы (например ``-`` воспримется, как математический оператор "минус"), используйте функцию ``attribute``:

.. code-block:: jinja

    {# Подобное не будет работать foo.data-foo #}
    {{ attribute(foo, 'data-foo') }}

Заметка:
    Выжно понимать, что фигурные скобки - *не* часть переменной, а оператор вывода значений переменных в шаблон. Поэтому при использовании переменных в тегах не нужно ставить фигурные скобки.

Если переменная, или атрибут не найден, то в шаблоне это заменится на ``null`` значение. Однако если опция ``strict_variables`` установленна как ``true``, Twig выдаст сообщение об ошибке (см. :ref:`environment options<environment_options>`).

Подробнее об устройстве переменных
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Рассмотрим что будет в PHP, когда в Twig ищет переменную ``foo.bar``

    * Проверим: ``foo`` - массив и ``bar`` один из его элементов;
    * Проверим: ``foo`` - объект и ``bar`` одно из его свойств;
    * Проверим: ``foo`` - объект и ``bar`` валидный метод (если ``bar`` конструктор - use ``__construct()``);
    * Проверим: ``foo`` - объект и существует метод ``getBar``;
    * Проверим: ``foo`` - объект и существует метод ``isBar``;
    * В противном случае ``null``.

    ``foo['bar']`` в этом случае используются строго массивы:

    * Проверим: ``foo`` - массив и ``bar`` один из его элементов;
    * В противном случае ``null``.


Заметка:

    Если вы хотите получить динамическое свойство объекта, используйте :doc:`attribute<functions/attribute>` функцию вместо этого.

Глобальные переменные
~~~~~~~~~~~~~~~~~~~~~

Эти переменные всегда доступны в шаблоне:

* ``_self``: ссылается на текущий шаблон;
* ``_context``: ссылается на текущий контекст;
* ``_charset``: ссылается на текущую кодировку.

Установка переменных
~~~~~~~~~~~~~~~~~~~~

Вы можете устанавливать значения переменных в блоках кода для этого используйте тег :doc:`set<tags/set>`:

.. code-block:: jinja

    {% set foo = 'foo' %}
    {% set foo = [1, 2] %}
    {% set foo = {'foo': 'bar'} %}

Фильтры
-------

Переменные можно фильтровать. Фильтры отделяются от переменных прямой чертой (``|``) и могут иметь аргументы внутри. Можно использовать сразу несколько фильтров, фильтры применяются по очереди.

В этом примере из ``name`` удаляются все HTML-теги и title-cases:

.. code-block:: jinja

    {{ name|striptags|title }}

Аргументы фильтров записываются в скобках после названия. В следующем примере к значению ``list`` добавится ``,``:

.. code-block:: jinja

    {{ list|join(', ') }}

Чтобы применить фильтр к блоку кода - оберните его тэгом :doc:`filter<tags/filter>`:

.. code-block:: jinja

    {% filter upper %}
        этот текст будет выведен в верхнем регистре
    {% endfilter %}

Подробнее о фильтрах :doc:`filters<filters/index>`

Функции
---------

Функции можно вызвать для генирации контента. Функции вызываются по их названию, как фильтры, аргументы также вставляются в (``()``).

Для примера функция ``range`` возвращает список целых чисел, аргументами является начальное и конечное число списка

.. code-block:: jinja

    {% for i in range(0, 3) %}
        {{ i }},
    {% endfor %}

Подробнее о функциях :doc:`functions<functions/index>`.

Названия аргументов
-------------------

Версия:: 1.12
    Поддержка названий аргументов была добавлена в Twig 1.12.

Аргументы для фильтров и функций могут быть дополнительно названы:

.. code-block:: jinja

    {% for i in range(low=1, high=10, step=2) %}
        {{ i }},
    {% endfor %}

Использование именованных аргументов делает шаблоны более понятными:

.. code-block:: jinja

    {{ data|convert_encoding('UTF-8', 'iso-2022-jp') }}

    {# В сравнении с  #}

    {{ data|convert_encoding(from='iso-2022-jp', to='UTF-8') }}

Также именованные аргументы полезны, когда вам не хочется менять некоторые аргументы по умолчанию, но и записывать их вам тоже не хочется:

.. code-block:: jinja

    {# Первый аргумент - формат даты, который задан в приложении глобально #}
    {{ "now"|date(null, "Europe/Paris") }}

    {# Или можно пропустить ``format``, но указать ``timezone`` #}
    {{ "now"|date(timezone="Europe/Paris") }}

Вы также можете использовать оба варианта записи аргументов, однако это не рекомендуется, потому что приведет к путанице:

.. code-block:: jinja

    {# Оба варианта - рабочие #}
    {{ "now"|date('d/m/Y H:i', timezone="Europe/Paris") }}
    {{ "now"|date(timezone="Europe/Paris", 'd/m/Y H:i') }}

Примечание:

    По каждой функции и каждому фильтру есть страница документации, где указаны какие аргументы доступны и их названия

Управляющие структуры
---------------------

К управляющим структурам относится все условные операторы (такие как  ``if``/``elseif``/``else``), ``for``-loops. Управляющие структуры находятся внутри``{% ... %}`` блоков.

На пример чтобы отобразить список пользователей ``users``, используется тег :doc:`for<tags/for>`:

.. code-block:: jinja

    <h1>Пользователи</h1>
    <ul>
        {% for user in users %}
            <li>{{ user.username|e }}</li>
        {% endfor %}
    </ul>

Тег :doc:`if<tags/if>` может быть использован для проверки:

.. code-block:: jinja

    {% if users|length > 0 %}
        <ul>
            {% for user in users %}
                <li>{{ user.username|e }}</li>
            {% endfor %}
        </ul>
    {% endif %}

Подробнее о тегах :doc:`tags<tags/index>`.

Комментирование
---------------

Для комментирования части кода, или пояснений к нему используйте ``{# ... #}``.

.. code-block:: jinja

    {# Примечание: закоментированно, тк больше не используется
        {% for user in users %}
            ...
        {% endfor %}
    #}

Подключение шаблонов
--------------------

Тег :doc:`include<tags/include>` возвращает содержимое шаблона из файла:

.. code-block:: jinja

    {% include 'sidebar.html' %}

По умолчанию содержимое подключаемых шаблонов встает в место вызова

В подключенном шаблоне определены переменные родительского шаблона

.. code-block:: jinja

    {% for box in boxes %}
        {% include "render_box.html" %}
    {% endfor %}

Подключенный шаблон ``render_box.html`` имеет доступ к переменной ``box``.

Название файла зависит от загрузчика шаблонов. Например ``Twig_Loader_Filesystem`` позволяет получить шаблон по названию файла. Также можно указать путь до дериктории шаблона, используя слэш ``/``:

.. code-block:: jinja

    {% include "sections/articles/sidebar.html" %}

Наследование шаблонов
---------------------

Самая мощная часть Twig - наследование шаблонов. Наследование шаблонов позволяет задать скелет вашего шаблона, а затем переопределить некоторые блоки.

Звучит сложно, однако стоит просто попробовать.

Давайте определим базовый шаблон, ``base.html``, для простой страницы с двумя колонками:

.. code-block:: html+jinja

    <!DOCTYPE html>
    <html>
        <head>
            {% block head %}
                <link rel="stylesheet" href="style.css" />
                <title>{% block title %}{% endblock %} - Мой сайт</title>
            {% endblock %}
        </head>
        <body>
            <div id="content">{% block content %}{% endblock %}</div>
            <div id="footer">
                {% block footer %}
                    &copy; Copyright 2013 <a href="http://example.com/">Вы</a>.
                {% endblock %}
            </div>
        </body>
    </html>

В этом примере тегом the :doc:`block<tags/block>` определяется 4 блока, которые мы и заменим. Все теги ``block`` сообщат шаблонизатору, что в последствии их можно будет переопределить

Дочерний шаблон может выглядеть так:

.. code-block:: jinja

    {% extends "base.html" %}

    {% block title %}Главная{% endblock %}
    {% block head %}
        {{ parent() }}
        <style type="text/css">
            .important { color: #336699; }
        </style>
    {% endblock %}
    {% block content %}
        <h1>Главная</h1>
        <p class="important">
            Приветсвую на своем потрясном сайте!
        </p>
    {% endblock %}

Здесь используется тег :doc:`extends<tags/extends>`. Он сообщает шаблонизатору, что этот шаблон наследуется от другово. *Тег ``extends`` должен быть первым в шаблоне*

Следует учесть, что так как блок ``footer`` не определен, то используется родительский

Возможно отображать значение родительского блока, используя функцию :doc:`parent<functions/parent>`:

.. code-block:: jinja

    {% block sidebar %}
        <h3>Оглавление</h3>
        {{ parent() }}
    {% endblock %}

Дополнительно:

    Подробнее про ``extends`` :doc:`extends<tags/extends>`. Описанны интересные возможности использования блоков, такие как динамическое наследование, условное наследование, вложенность и сферы применения.

Замечание:

    Twig также поддерживает множественное наследование с использованием тега :doc:`use<tags/use>` tag. Это продвинутая возможность и врятли она понадобится в простых шаблонах.

Экранирование
-------------

Генерируя HTML всегда есть возможность вывести специальные символы, ломающие логику HTML. Здесь есть два варианта - принудительное экранирование, или установленное по умолчанию для всех переменных.

Работа с принудительным экранированием
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Если экранирование отключенно, то это *ваша* обязанность. Что экранировать? Любую переменную, которой вы не доверяете.

Экранирование доступно через фильтры :doc:`escape<filters/escape>` или ``e``:

.. code-block:: jinja

    {{ user.username|e }}

По умолчанию фильтр ``escape`` использует ``html`` режим экранирования, но в зависимости от ситуации вы можете этот режим изменить с помощью атрибута фильтра:

.. code-block:: jinja

    {{ user.username|e('js') }}
    {{ user.username|e('css') }}
    {{ user.username|e('url') }}
    {{ user.username|e('html_attr') }}

Работа с автоматическим экранированием
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Вне зависимости настроек шаблонизатора, вы можете включить экранирование для блока кода с помощью тега :doc:`autoescape<tags/autoescape>`:

.. code-block:: jinja

    {% autoescape %}
        Все написанное будет экранированно
    {% endautoescape %}

По умолчанию  ``autoescape`` использует режим ``html``, однако это легко исправить

.. code-block:: jinja

    {% autoescape 'js' %}
        Все написанное будет экранированно, как js-код
    {% endautoescape %}

Экранирование кода
------------------

Иногда необходимо шаблонизатору вывести данные без обработки, самым простым решением будет:

.. code-block:: jinja

    {{ '{{' }}

Однако когда таких данных много, можно использовать тег :doc:`verbatim<tags/verbatim>`.

Макросы
-------

Версия:: 1.12
    Возможность устанавливать значения аргументов по умолчанию доступна с Twig 1.12.

Макросы схожи с функциями в обычных языках программирования. Они полезны для повторного использования повторяющегося HTML-кода.

Макрос определяется тегом :doc:`macro<tags/macro>`. Небольшой пример:

.. code-block:: jinja

    {% macro input(name, value, type, size) %}
        <input type="{{ type|default('text') }}" name="{{ name }}" value="{{ value|e }}" size="{{ size|default(20) }}" />
    {% endmacro %}

Макросы могут быть определенны в любом шаблоне и должны быть "импортированны" тегом :doc:`import<tags/import>` перед использованием:

.. code-block:: jinja

    {% import "forms.html" as forms %}

    <p>{{ forms.input('username') }}</p>

Также макросу можно задать временное имя с помощью тега :doc:`from<tags/from>`:

.. code-block:: jinja

    {% from 'forms.html' import input as input_field %}

    <dl>
        <dt>Логин</dt>
        <dd>{{ input_field('username') }}</dd>
        <dt>Пароль</dt>
        <dd>{{ input_field('password', '', 'password') }}</dd>
    </dl>

Значения по умолчанию могут быть определенны при объявлении аргументов макроса:

.. code-block:: jinja

    {% macro input(name, value = "", type = "text", size = 20) %}
        <input type="{{ type }}" name="{{ name }}" value="{{ value|e }}" size="{{ size }}" />
    {% endmacro %}

Выражения
-----------

Операторы
~~~~~~~~~

Twig позволяет использовать логические операторы везде. Они работают также как в PHP.

Замечание:

    Приоритет операторов показан ниже, сначала идут операторы с наименьшим приоритетом и по возрастающей:
    ``b-and``, ``b-xor``, ``b-or``, ``or``, ``and``,
    ``==``, ``!=``, ``<``, ``>``, ``>=``, ``<=``, ``in``, ``..``, ``+``,
    ``-``, ``~``, ``*``, ``/``, ``//``, ``%``, ``is``, and ``**``.

Данные
~~~~~~~~

Версия:: 1.5
    Поддержка хешей названий и выражений добавлена в Twig 1.5.


Простейшая форма выражений - Twig-данные. Twig-данные представляются в PHP как строки, числа, и массивы. Доступные типы данных:

* Строки - ``"Привет мир"``: Все, что написано между кавычек (``'``/``"``) является строкой. Это полезно, когда нужно использовать строчные значения внутри шаблонов, на пример для аргументов функций и фильтров, кавычки должны быть экранированны бэкслешем (``\``) -- например: ``'It\'s good'``.

* Числа - ``42`` / ``42.23``: Целочисленные и десятичные. Числа записываются так как есть. Если нет точки - число считается целым.

* Массивы - ``["foo", "bar"]``: Массивы определяются списком данных, разделенными запятой (``,``) и обернуты в квадратные скобки (``[]``).

* Хэши - ``{"foo": "bar"}``: Хеши определяются списком "ключ - значение"б разделенными запятой (``,``) и обернуты в фигурные скобки (``{}``).

  .. code-block:: jinja

    {# ключи - строки #}
    { 'foo': 'foo', 'bar': 'bar' }

    {# ключи - названия (эквивалентно предыдущему варианту) -- доступно с Twig 1.5 #}
    { foo: 'foo', bar: 'bar' }

    {# ключи - цифры #}
    { 2: 'foo', 4: 'bar' }

    {# ключи - выражения (выражения должны быть включены в скобки ) -- доступно с Twig 1.5 #}
    { (1 + 1): 'foo', (a ~ 'b'): 'bar' }

* Булевы - ``true`` / ``false``: правда и ложь соответсвенно.

* Пустое - ``null`` специфичная переменная, означает то, что переменная не определена. ``none`` не аналог для ``null``.

Массивы и хеши могут быть вложены друг в друга:

.. code-block:: jinja

    {% set foo = [1, {"foo": "bar"}] %}

Примечание:

    Использование двойных или одинарных кавычек не влияет на производительность, но вставка строк возможна только в двойных кавычках.

Математика
~~~~~~~~~~

Twig позволяет производить любые математические операции над данными. Это редко используется в шаблонах, но поддерживается:

* ``+``: Соединяет два объекта вместе, также складывает цифры ``{{
  1 + 1 }}`` -> ``2``.

* ``-``: Операция вычитания для чисел ``{{ 3 - 2 }}`` -> ``1``.

* ``/``: Операция деления для чисел ``{{ 1 / 2 }}`` -> ``{{ 0.5 }}``. Результат будет десятичным.

* ``//``: Операция деления для чисел. ``{{20 // 7 }}`` -> ``2``. Результат будет целочисленным. Фактически отсекается часть после ``.``.

* ``%``: Вычисляет остаток от деления ``{{ 11 % 7 }}`` -> ``4``.

* ``*``: Операция умножения для чисел ``{{ 2 * 2 }}`` -> ``4``.

* ``**``: Возводит "левое" число в "правую" степень ``{{ 2 ** 3 }}`` -> ``8``.

Логика
~~~~~~

Вы можете комбинировать выражения используя следующие операторы:

* ``and``: Результат: ``true``, если "левое" и "правое" значения ``true``.

* ``or``: Результат: ``true``, если "левое" или "правое" значения ``true``.

* ``not``: Результат: противоположное значение.

* ``(expr)``: Группа выражений.

Замечание:

    Также Twig поддерживает бинарные операторы: (``b-and``, ``b-xor``, and ``b-or``).

Сравнение
~~~~~~~~~~~

Следующие операторы доступны в любых выражениях и работают как в любом языке программирования: ``==``, ``!=``, ``<``, ``>``, ``>=``, and ``<=``.

Оператор содержания
~~~~~~~~~~~~~~~~~~~~

Оператор ``in`` проводит анализ на совпадения.

Результатом будет ``true``, если "левое" значение найдено в "правом":

.. code-block:: jinja

    {# Вернет true #}

    {{ 1 in [1, 2, 3] }}

    {{ 'cd' in 'abcde' }}

Примечание:

    You can use this filter to perform a containment test on strings, arrays,
    or objects implementing the ``Traversable`` interface.

Для отрицания используйте оператор ``not in``:

.. code-block:: jinja

    {% if 1 not in [1, 2, 3] %}

    {# эквивалентно #}
    {% if not (1 in [1, 2, 3]) %}

Тестирующий оператор
~~~~~~~~~~~~~~~~~~~~

Оператор ``is`` проверяет данные на соответствие

.. code-block:: jinja

    {{ name is odd }}

Можно использовать аргументы:

.. code-block:: jinja

    {% if loop.index is divisibleby(3) %}

Для отрицания используйте оператор ``is not``:

.. code-block:: jinja

    {% if loop.index is not divisibleby(3) %}

    {# эквивалентно #}
    {% if not (loop.index is divisibleby(3)) %}

Увидеть результаты работы можно посмотреть в тестах :doc:`tests<tests/index>`.

Другие операторы
~~~~~~~~~~~~~~~~

Версия:: 1.12.0
    Support for the extended ternary operator was added in Twig 1.12.0.

Следующие операторы очень полезны, но не попадают ни в какую категорию:

* ``..``: Создает последовательность от "левого" до "правого" операнда, на пример ``1..10``

* ``|``: Применяет фильтр

* ``~``: Преобразует все операнды в строки и соединяет их, на пример ``{{ "Привет " ~ name ~ "!" }}`` выведет (предположим, что в ``name`` 'Вася') ``Привет Вася!``.

* ``.``, ``[]``: Получает атрибут объекта.

* ``?:``: Тернарный оператор

  .. code-block:: jinja

      {{ foo ? 'Да' : 'Нет' }}

      {# Доступно с Twig 1.12.0 #}
      {{ foo ?: 'Нет' }} == {{ foo ? foo : 'Нет' }}
      {{ foo ? 'Да' }} == {{ foo ? 'Да' : '' }}

Строковые замены
~~~~~~~~~~~~~~~~~~~~

Версия:: 1.5
    Строковые замены доступны с Twig 1.5.

Строковая заменя (``#{expression}``) доступна для любого выражения, находящегося в *строке с двойными скобками*. Например:

.. code-block:: jinja

    {{ "Привет #{name}! Как дела?" }}
    {{ "Дважды два =  #{2*2}" }}

Управление пробелами
---------------------

Версия:: 1.1
    Tag level whitespace control was added in Twig 1.1.

Первая строка после тега удаляется автоматически, как в PHP. Пробелы, табуляция, пустые строки же не удаляются.

Используйте тег ``spaceless`` для удаления пробельных символов *между HTML-тегами*:

.. code-block:: jinja

    {% spaceless %}
        <div>
            <strong>Жирная строка</strong>
        </div>
    {% endspaceless %}

    {# на выходе будет <div><strong>Жирная строка</strong></div> #}

Также вы можете убирать пробельные символы для блоков кода:

.. code-block:: jinja

    {% set value = 'no spaces' %}
    {#- Нет начальных и конечных пробелов -#}
    {%- if true -%}
        {{- value -}}
    {%- endif -%}

    {# Выведет 'no spaces' #}

Можно убирать пробелы между значением переменной и предыдущим символом, опционально для конца и начала переменной:

.. code-block:: jinja

    {% set value = 'Нет пробелам!' %}
    <li>    {{- value }}    </li>

    {# выведет '<li>Нет пробелам!    </li>' #}

Расширения
----------

Twig может быть легко расширен.

Если вы ищете какой-то тег/фильтр/функцию загляните в оффициальный репозиторий `extension repository`_.

If you want to create your own, read the :ref:`Creating an
Extension<creating_extensions>` chapter.

.. _`Twig bundle`:                https://github.com/Anomareh/PHP-Twig.tmbundle
.. _`Jinja syntax plugin`:        http://jinja.pocoo.org/2/documentation/integration
.. _`Twig syntax plugin`:         http://plugins.netbeans.org/plugin/37069/php-twig
.. _`Twig plugin`:                https://github.com/pulse00/Twig-Eclipse-Plugin
.. _`Twig language definition`:   https://github.com/gabrielcorpse/gedit-twig-template-language
.. _`extension repository`:       http://github.com/fabpot/Twig-extensions
.. _`Twig syntax mode`:           https://github.com/bobthecow/Twig-HTML.mode
.. _`other Twig syntax mode`:     https://github.com/muxx/Twig-HTML.mode
.. _`Notepad++ Twig Highlighter`: https://github.com/Banane9/notepadplusplus-twig
.. _`web-mode.el`:                http://web-mode.org/
